version: '3'
services:
    # Service pour notre app
    # Le service app construira une image basé sur notre Dockerfile
    app:
        # Cette configuration indique à Docker Compose de construire une image locale
        build:
            # Les arguments qui seront passés à notre Dockerfile
            args:
                user: lucas
                uid: 1000
            # Soit un chemin vers un répertoire contenant un Dockerfile, soit une URL vers un référentiel git.
            context: ./
            dockerfile: ./docker/Dockerfile
        # Comme Docker Compose charge automatiquement les fichiers variables .env situés dans le même répertoire que le fichier docker-compose.yml...
        env_file:
            - .env
        image: devis-habitation
        container_name: devis-habitation-app
        # Indique qu'il faut toujours redémarrer ce service, sauf s'il est explicitement arrêté.
        restart: unless-stopped
        # Définit le répertoire par défaut du service
        working_dir: /app
        depends_on:
          - db
          - nginx
        # Crée un volume partagé qui synchronisera le contenu du répertoire actuel avec /var/www dans le conteneur.
        volumes:
            - ./:/app
        # Configure ce service pour utiliser un réseau nommé devishabitationetwork
        networks:
            - devishabitationetwork
    # Service pour notre server SQL et notre database
    db:
        image: mysql:5.7
        # Le nom du container est également le nom host à saisir par exemple dans adminer
        container_name: devis-habitation-db
        restart: unless-stopped
        # Définit les variables d'environnement dans le nouveau conteneur
        environment:
            # On bind les variables de notre .env
            MYSQL_DATABASE: ${DB_DATABASE}
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
            MYSQL_PASSWORD: ${DB_PASSWORD}
            MYSQL_USER: ${DB_USERNAME}
            SERVICE_TAGS: dev
            SERVICE_NAME: mysql
        # Crée un volume pour partager un dump de base de données .sql qui sera utilisé pour initialiser la base de données de l'application
        volumes:
            - ./docker/config/database/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
        networks:
            - devishabitationetwork
    # Service pour la gestion de la database
    phpmyadmin:
        image: phpmyadmin/phpmyadmin:latest
        container_name: devis-habitation-phpmyadmin
        networks:
            - devishabitationetwork
        ports:
            - 8181:80
        environment:
            MYSQL_USERNAME: ${DB_USERNAME}
            MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
            PMA_HOST: db
        depends_on:
          - db
    # Service pour notre server web
    nginx:
        # Image Nginx pré-construite sur Alpine, une distribution Linux légère
        image: nginx:1.17-alpine
        container_name: devis-habitation-nginx
        restart: unless-stopped
        ports:
            # Redirection de port: 8000 machine hôte -> 80 container
            - 8000:80
        volumes:
            # synchronisera le contenu du répertoire actuel avec /var/www à l'intérieur du conteneur
            - ./:/var/www
            - /var/www/vendor/
            # en synchronisant notre dossier de config contenant une config perso nginx,
            # la copie de notre fichier conf se fait dans le dossier de config nginx de container.
            - ./docker/config/nginx:/etc/nginx/conf.d
        networks:
            - devishabitationetwork
# Nos services partageront un pont de réseau appelé devishabitationetwork
networks:
    devishabitationetwork:
        driver: bridge
